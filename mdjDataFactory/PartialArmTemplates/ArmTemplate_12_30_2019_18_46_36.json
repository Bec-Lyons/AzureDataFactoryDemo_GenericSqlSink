{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mdjDataFactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Azure Blob Single Parquet to Azure Blob Single Parquet Data Flow Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Decide If Delete Original File",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "azureBlobSingleParquetToAzureBlobSingleParquetDataFlow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.deleteSourceFile",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Exec Pipeline Azure Blob Delete Single File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Azure Blob Delete Single Parquet File Pipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"azureBlobConnectionStringSecretName": {
												"value": "@pipeline().parameters.sourceAzureBlobConnectionStringSecretName",
												"type": "Expression"
											},
											"azureBlobContainerName": {
												"value": "@pipeline().parameters.sourceAzureBlobSingleParquetContainerName",
												"type": "Expression"
											},
											"azureBlobFolderPath": {
												"value": "@pipeline().parameters.sourceAzureBlobSingleParquetFolderPath",
												"type": "Expression"
											},
											"azureBlobFileName": {
												"value": "@pipeline().parameters.sourceAzureBlobSingleParquetFileName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "azureBlobSingleParquetToAzureBlobSingleParquetDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "azureBlobSingleParquetToAzureBlobSingleParquetDataFlow",
								"type": "DataFlowReference",
								"parameters": {
									"sourceConnectionSecretName": {
										"value": "'@{pipeline().parameters.sourceAzureBlobConnectionStringSecretName}'",
										"type": "Expression"
									},
									"sinkConnectionStringSecretName": {
										"value": "'@{pipeline().parameters.sinkAzureBlobConnectionStringSecretName}'",
										"type": "Expression"
									},
									"sourceObjectName": {
										"value": "'@{concat(\n   pipeline().parameters.sourceAzureBlobConnectionStringSecretName, '/', \n   pipeline().parameters.sourceAzureBlobSingleParquetContainerName, '/', \n   pipeline().parameters.sourceAzureBlobSingleParquetFolderPath, '/', \n   pipeline().parameters.sourceAzureBlobSingleParquetFileName\n)}'",
										"type": "Expression"
									},
									"sinkObjectName": {
										"value": "'@{concat(\n   pipeline().parameters.sinkAzureBlobConnectionStringSecretName, '/', \n   pipeline().parameters.sinkAzureBlobSingleParquetContainerName, '/', \n   pipeline().parameters.sinkAzureBlobSingleParquetFolderPath, '/', \n   pipeline().parameters.sinkAzureBlobSingleParquetFileName\n)}'",
										"type": "Expression"
									},
									"dataFactoryName": {
										"value": "'@{pipeline().DataFactory}'",
										"type": "Expression"
									},
									"dataFactoryPipelineName": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"dataFactoryPipelineRunId": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"sinkFileNameNoPath": {
										"value": "'@{pipeline().parameters.sinkAzureBlobSingleParquetFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"readFromAzureBlobSingleParquet": {
										"azureBlobConnectionStringSecretName": {
											"value": "@pipeline().parameters.sourceAzureBlobConnectionStringSecretName",
											"type": "Expression"
										},
										"azureBlobSingleParquetContainerName": {
											"value": "@pipeline().parameters.sourceAzureBlobSingleParquetContainerName",
											"type": "Expression"
										},
										"azureBlobSingleParquetFolderPath": {
											"value": "@pipeline().parameters.sourceAzureBlobSingleParquetFolderPath",
											"type": "Expression"
										},
										"azureBlobSingleParquetFileName": {
											"value": "@pipeline().parameters.sourceAzureBlobSingleParquetFileName",
											"type": "Expression"
										}
									},
									"writeToAzureBlobSingleParquet": {
										"azureBlobConnectionStringSecretName": {
											"value": "@pipeline().parameters.sinkAzureBlobConnectionStringSecretName",
											"type": "Expression"
										},
										"azureBlobSingleParquetContainerName": {
											"value": "@pipeline().parameters.sinkAzureBlobSingleParquetContainerName",
											"type": "Expression"
										},
										"azureBlobSingleParquetFolderPath": {
											"value": "@pipeline().parameters.sinkAzureBlobSingleParquetFolderPath",
											"type": "Expression"
										},
										"azureBlobSingleParquetFileName": {
											"value": "@pipeline().parameters.sinkAzureBlobSingleParquetFileName",
											"type": "Expression"
										}
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"parameters": {
					"sourceAzureBlobConnectionStringSecretName": {
						"type": "string"
					},
					"sourceAzureBlobSingleParquetContainerName": {
						"type": "string"
					},
					"sourceAzureBlobSingleParquetFolderPath": {
						"type": "string"
					},
					"sourceAzureBlobSingleParquetFileName": {
						"type": "string"
					},
					"sinkAzureBlobConnectionStringSecretName": {
						"type": "string"
					},
					"sinkAzureBlobSingleParquetContainerName": {
						"type": "string"
					},
					"sinkAzureBlobSingleParquetFolderPath": {
						"type": "string"
					},
					"sinkAzureBlobSingleParquetFileName": {
						"type": "string"
					},
					"deleteSourceFile": {
						"type": "bool"
					}
				},
				"folder": {
					"name": "Source Azure Blob Single Parquet/Data Flow"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/azureBlobSingleParquetToAzureBlobSingleParquetDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azureBlobSingleParquetToAzureBlobSingleParquetDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Source Azure Single Parquet"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "azureBlobSingleParquetFileNameDataset",
								"type": "DatasetReference"
							},
							"name": "readFromAzureBlobSingleParquet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "azureBlobSingleParquetNoFileNameDataset",
								"type": "DatasetReference"
							},
							"name": "writeToAzureBlobSingleParquet"
						}
					],
					"transformations": [
						{
							"name": "EnrichWithRuntimeMetadata"
						}
					],
					"script": "\nparameters{\n\tsourceConnectionSecretName as string,\n\tsinkConnectionStringSecretName as string,\n\tsourceObjectName as string,\n\tsinkObjectName as string,\n\tdataFactoryName as string,\n\tdataFactoryPipelineName as string,\n\tdataFactoryPipelineRunId as string,\n\tsinkFileNameNoPath as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> readFromAzureBlobSingleParquet\nreadFromAzureBlobSingleParquet derive({__sourceConnectionStringSecretName} = $sourceConnectionSecretName,\n\t\t{__sinkConnectionStringSecretName} = $sinkConnectionStringSecretName,\n\t\t{__sourceObjectName} = $sourceObjectName,\n\t\t{__sinkObjectName} = $sinkObjectName,\n\t\t{__dataFactoryName} = $dataFactoryName,\n\t\t{__dataFactoryPipelineName} = $dataFactoryPipelineName,\n\t\t{__dataFactoryPipelineRunId} = $dataFactoryPipelineRunId) ~> EnrichWithRuntimeMetadata\nEnrichWithRuntimeMetadata sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($sinkFileNameNoPath)],\n\tpartitionBy('hash', 1),\n\tquoteAll: true) ~> writeToAzureBlobSingleParquet"
				}
			},
			"dependsOn": []
		}
	]
}